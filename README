Funky Tester v 0.6

Introduction
============

This project is designed to provide a generic functional test framework for
embedded systems. Two types of external metadata make this possible:

 - Platform metadata defines the functional test platform and the capabilities
 it provides during test.
 
 - Product metadata defines various important characteristics of the system
 being tested such as:
   - Test Specification; declaration of tests to be run and associated
   information about the interfaces being tested.
   - config.yaml; describe operational characteristics of the UUT such as serial
   console baud rate, expected u-boot and linux command prompts, and other
   information that is still being defined.

Terminology
===========

Platform
PlatformSlot
UnitUnderTest
Test
Action
Device
PlatformServer
Event
Command

Getting Started
===============

First you must create a platform manifest file which points to a repository
containing Platform metadata. 

Roadmap
=======

This is a preliminary feature roadmap which will provide a guideline for what to
expect as development continues.

0.6
  
  * Metadata
    * Support Git repositories
    * Platform, Product

  * Gtk "functester" GUI
    * Platform/Version Selection
    * PlatformSlot/UUT Setup Page
      * Product/Version/Specification Selection
      * Change the UUT on a Platform Slot by changing serial number.

  * UUT/Test Manager Page
    * Change the UUT on a Platform Slot by changing serial number.
    * Run individual test on the selected UUT.
    * Run all selected tests.
    * Run all tests on selected UUT.

  * Test logging using SQLAlchemy 0.8
    * Local sqlite DB or remote DB using connection parameters specified on
      commandline.

0.7

  * Unit Testing 
    * Need to focus on unit testing to prevent regression when bug fixing.

  * Socket-based IPC between UI and PlatformServer backend.

  * Support for Redboot

0.8

  * Metadata
    * Solidify API to allow abstraction to different backends: SVN,
      CVS, Git, local directory, database
    * Implement SVN alongside Git support to prove out API, leave the rest to
      interested parties.

  * Define and document protocol for replacing modular components in UI or
    supplementing backend components with custom code.
    * UI: Different users might need to identify their UUT in different
      ways which requires switching out the UUT Setup Widget.
    * Backend: Different users might want to add their own situation-specific
      Action types.

0.9

  * GUI
    * Multi-GUI Access control issues.
    * LogViewer GUI
      * Web-based?
  
1.0

  * Replace declarative Specification DSL (yaml) with custom DSL to provide more
    intuitive syntax--should be understandable and usable by test technicians
    who need to make changes to testsets.


